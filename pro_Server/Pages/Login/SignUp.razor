@page  "/signup"
@using pro_Server.Models
@using pro_Server.Helpers
@using pro_Server.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IUserService userService
@inject IJSRuntime jsRunTime

<EditForm Model="@User" OnValidSubmit="@RegisterUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Book Stores Register</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="User.EmailAddress" placeholder="email address" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="User.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="User.ConfirmPassword" placeholder="confirm password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Sign up" />
        <a href="/login" class="col-6">Already an user?</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMesssage</span>
    </div>
</EditForm>

@code {

    private User User;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        User = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> RegisterUser()
    {
        var returnedUser = await userService.RegisterUserAsync(User);

        if (string.IsNullOrEmpty(returnedUser.Token))
        {
            LoginMesssage = "Invalid username or password";
        }
        else
        {
            await localStorageService.SetItemAsync("emailAddress", returnedUser.EmailAddress);
            await localStorageService.SetItemAsync("token", returnedUser.Token);
            await localStorageService.SetItemAsync("expiration", returnedUser.Expiration);

            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/index");
        }

        return await Task.FromResult(true);
    }

}